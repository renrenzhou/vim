
"=============================================================easymotion plugin
let g:EasyMotion_leader_key = 'f' "修改leader键

"=========================================================================theme
"set background=dark
"colorscheme molokai                 " 设置配色方案
"set background=dark
"colorscheme solarized


"=======================================================================airline
set laststatus=2   "总是显示状态栏
let g:airline_powerline_fonts = 1

"===============================================================NerdTree plugin
map <F3> :NERDTreeToggle<CR>    "打开树状文件目录
let NERDTreeDirArrows = 1
"autocmd BufRead * 25vsp ./     "自动运行NERDTree插件

"======================================================================easygrep
map ss :Grep  

"========================================================================debug

set makeprg=mingw32-make  "编译的命令和编译器设置

"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %< -tui"
    exec "!gdb ./%<"
endfunc

"========================================================================tagbar
nmap <silent> <F6> :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 30

"========================================================================ycm
"let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
"
""let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
"let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
"let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项
"let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
""nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>    "force recomile with syntastic
""nnoremap <leader>lo :lopen<CR> "open locationlist
""nnoremap <leader>lc :lclose<CR>    "close locationlist
"inoremap <leader><leader> <C-x><C-o>
""在注释输入中也能补全
"let g:ycm_complete_in_comments = 1
""在字符串输入中也能补全
"let g:ycm_complete_in_strings = 1
""注释和字符串中的文字也会被收入补全
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"let g:ycm_key_invoke_completion = '<C-Space>'
""python automation"
""let g:ycm_python_binary_path = '/usr/bin/python3'
"let g:ycm_python_binary_path = 'python3'
"set completeopt-=preview

let g:EasyMotion_leader_key = 'f' "修改leader键
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>

hi Normal  ctermfg=252 ctermbg=none


"==========================================================================ale
let g:ale_sign_column_always = 0
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = 'x'
let g:ale_sign_warning = '!'
"nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
":cc    "            显示详细错误信息 ( :help :cc )
":cp    "            跳到上一个错误 ( :help :cp )
nmap <C-k> :cp<CR>
"            跳到下一个错误 ( :help :cn )
nmap <C-j> :cn<CR>
":cl    "            列出所有错误 ( :help :cl )
":cw    "            如果有错误列表，则打开quickfix窗口 ( :help :cw )
":col   "            到前一个旧的错误列表 ( :help :col )
":cnew  "            到后一个较新的错误列表 ( :help :cnew )
let &runtimepath.=',~/.vim/plugged/ale'

"===================================================================toggle list
let g:lt_height = 5
let g:lt_location_list_toggle_map = '<F7>'
let g:lt_quickfix_list_toggle_map = '<leader>q'

let g:mapleader = ","

let g:choosewin_overlay_enable = 1

hi Normal  ctermfg=252 ctermbg=none

"=====================================================================leaderf"
let g:Lf_GtagsAutoGenerate=0
nmap fr :LeaderfMru<CR>
nmap fl :LeaderfLine<CR>
nmap fb :LeaderfBufferAll<CR>
nmap ff :LeaderfFile<CR>
"nmap fg :LeaderfLineAll<CR>
nmap gs :Leaderf gtags  --all --result ctags-mod<CR>
nmap gl :Leaderf gtags --current-buffer --result ctags-mod<CR>
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_RootMarkers = ['.project']
let g:Lf_WindowPosition='popup'
let g:Lf_PreviewInPopup=1
let g:Lf_Gtagslabel='native-pygments'
let g:Lf_GtagsHigherThan6_6_2=0
nmap gr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
nmap gd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>

""
hi Normal guifg=#2E3436 guibg=#EDEDED
hi CursorLine guibg=#4A90D9 guifg=#FFFFFF
set ruler
